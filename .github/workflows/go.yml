name: Go CI

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]
    paths:
      - '.github/workflows/go.yml'
      - 'go-example/**'

jobs:
  build_and_run_go_app:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [ 1.18.x, 1.19.x ]

    name: Go ${{ matrix.go-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Download dependencies(manual-instrumentation)
        working-directory: ./go-example/manual-instrumentation
        run: |
          go mod tidy
      - name: Run application(manual-instrumentation)
        working-directory: ./go-example/manual-instrumentation
        run: |
          go run main.go
      - name: Download dependencies(auto-instrumentation)
        working-directory: ./go-example/auto-instrumentation
        run: |
          go mod tidy
      - name: Run application(auto-instrumentation)
        working-directory: ./go-example/auto-instrumentation
        run: |
          go build -o ./auto-instrumentation
          ./auto-instrumentation &
          TEMP_OUTPUT_FILE=$(mktemp)
          WAIT_TIME=5
          for i in `seq 1 3`;
          do
            HTTP_CODE=$(curl --silent --output $TEMP_OUTPUT_FILE --write-out "%{http_code}" "http://localhost:8080")
            if [[ ${HTTP_CODE} -lt 200 || ${HTTP_CODE} -gt 299 ]] ; then
              >&2 cat $TEMP_OUTPUT_FILE
              WAIT_TIME=$((WAIT_TIME * $i));
              echo Sleeping for ${WAIT_TIME} seconds...
              sleep ${WAIT_TIME}
            else
              cat $TEMP_OUTPUT_FILE
              rm $TEMP_OUTPUT_FILE
              break
            fi
          done
